[
    {
        "context": {
            "file": "questions/cors.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9
            ],
            "tags": [
                "cors",
                "http"
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What is CORS? How does it work?</h3>\n",
        "Notes": "<p>Cross-origin resource sharing (CORS) is a mechanism that allows many resources (e.g., fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated. It’s a mechanism supported in HTML5 that manages <code>XMLHttpRequest</code> access to a domain different.</p>\n<p>CORS adds new HTTP headers that provide access to permitted origin domains. For HTTP methods other than GET (or POST with certain MIME types), the specification mandates that browsers first use an HTTP OPTIONS request header to solicit a list of supported (and available) methods from the server. The actual request can then be submitted. Servers can also notify clients whether “credentials” (including Cookies and HTTP Authentication data) should be sent with requests.</p>\n"
    },
    {
        "context": {
            "file": "questions/crud-http.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "http",
                "rest",
                "crud"
            ],
            "levels": [
                9,
                10
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What is CRUD? How do CRUD operations map to HTTP verbs in RESTful web API?</h3>\n",
        "Notes": "<pre><code class=\"language-haml\">Method      HTTP Verb\n-<span class=\"ruby\">-------------------------\n</span>Create      POST\nRead        GET\nUpdate      PUT (or PATCH)\nDelete      DELETE\n</code></pre>\n"
    },
    {
        "context": {
            "file": "questions/css-selectors.md",
            "author": "Jacob Larson <jacob.j.larson@accenture.com>",
            "isRemoteOk": false,
            "levels": [
                9,
                10
            ],
            "tags": [
                "css"
            ]
        },
        "body": "<h3>What elements would be targetted by the following CSS selectors?</h3>\n<pre><code class=\"language-css\"><span class=\"hljs-id\">#container</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-class\">.container</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-tag\">h1</span><span class=\"hljs-class\">.error</span>, <span class=\"hljs-tag\">h2</span><span class=\"hljs-class\">.error</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-class\">.message</span><span class=\"hljs-class\">.success</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-attr_selector\">[type=text]</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-attr_selector\">[href]</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-class\">.container</span> &gt; <span class=\"hljs-class\">.column</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-class\">.container</span> <span class=\"hljs-class\">.column</span> <span class=\"hljs-rules\">{}</span>\n\n<span class=\"hljs-rule\"><span class=\"hljs-attribute\">a</span>:<span class=\"hljs-value\">hover {}\n\n* {}\n</span></span></code></pre>\n",
        "Notes": "<ul>\n<li>An element whose <em>id</em> is <code>container</code></li>\n<li>Any element whose <em>class</em> is <code>container</code></li>\n<li>Either <code>h1</code> or <code>h2</code> elements with a <em>class</em> of <code>error</code></li>\n<li>Any element with <em>both</em> <code>message</code> and <code>success</code> classes</li>\n<li>Any element whose <code>type</code> attribute is <code>text</code></li>\n<li>Any element with a <code>href</code> attribute</li>\n<li>Any <code>column</code> class which is a <em>direct decendant</em> of <code>container</code></li>\n<li>Any <code>column</code> class which is a <em>decendant</em> of <code>container</code></li>\n<li>An anchor with <em>psuedo-class</em> of hover (mouseover)</li>\n<li>Anything/Everything (wildcard)</li>\n</ul>\n"
    },
    {
        "context": {
            "file": "questions/db.row-col-vs-document.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "database",
                "nosql"
            ],
            "isRemoteOk": true
        },
        "body": "<h3>Compare and contrast row/column-oriented and document-oriented datastores</h3>\n<p>_e.g.; How is MongoDB different from MySQL? What about normalization?</p>\n",
        "Notes": "<p>@todo</p>\n"
    },
    {
        "context": {
            "file": "questions/dns.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "http"
            ],
            "levels": [
                9
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What does a DNS server do?</h3>\n",
        "Notes": "<p>Most prominently, it translates domain names, which can be easily memorized by humans, to the numerical IP addresses needed for the purpose of computer services and devices worldwide. The Domain Name System is an essential component of the functionality of most Internet services because it is the Internet's primary directory service.</p>\n<p>Translates internet names to IP addresses.</p>\n"
    },
    {
        "context": {
            "file": "questions/es6-fav-feature.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "js",
                "javascript"
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What's your favorite feature of ES6?</h3>\n",
        "Notes": "<p>Something like...</p>\n<ul>\n<li>Destructuring</li>\n<li>Native Module Support</li>\n<li>Generators</li>\n<li>Template Literals</li>\n<li>Native Promises</li>\n<li>Spread</li>\n<li>Arrow Function Syntax</li>\n<li>Native Classes</li>\n</ul>\n"
    },
    {
        "context": {
            "file": "questions/js.array-duplicate.md",
            "author": "Jacob Larson <jacob.j.larson@accenture.com>",
            "contributors": [
                "Danny Eck <daniel.eck@accenture.com>"
            ],
            "levels": [
                9,
                10
            ],
            "tags": [
                "javascript",
                "js"
            ],
            "isRemoteOk": false
        },
        "body": "<h3>Implement an array duplicator function</h3>\n<p>Write a function <code>duplicate()</code> which accepts an array input and returns 2 copies of the elements.</p>\n<p><em>e.g.;</em></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> inputArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nduplicate(inputArr); <span class=\"hljs-comment\">// &lt;= returns [1, 2, 3, 1, 2, 3]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">duplicate</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-comment\">// body...</span>\n}\n</code></pre>\n",
        "Notes": "<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">duplicate</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> arr.concat(arr);\n}\n</code></pre>\n<p><em>or</em></p>\n<p>with loop control structures</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">duplicate</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> i, j, out = [], N = arr.length;\n  <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">2</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      out.push(arr[j]);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> out;\n}\n</code></pre>\n<blockquote>\n<p>Brownie points if the candidate first asks whether it is desired to do in-place operations if</p>\n</blockquote>\n"
    },
    {
        "context": {
            "file": "questions/js.array-length.md",
            "author": "Jacob Larson <jacob.j.larson@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "JS"
            ],
            "isRemoteOk": false
        },
        "body": "<h3>What is length of myArray?</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> myArray = [];\nmyArray.push(<span class=\"hljs-number\">1</span>);\nmyArray.push(<span class=\"hljs-number\">2</span>);\n</code></pre>\n",
        "Notes": "<p>The <code>length</code> of <code>myArray</code> is <code>2</code>.</p>\n"
    },
    {
        "context": {
            "file": "questions/js.closures-vs-prototypes.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "js",
                "javascript"
            ],
            "levels": [
                9
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What are the tradeoffs between closures and prototypes in JavaScript?</h3>\n",
        "Notes": "<p>Inheritance, extensibility vs. visibility/privacy</p>\n"
    },
    {
        "context": {
            "file": "questions/js.fibonacci.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "js",
                "recursion",
                "fibonacci",
                "javascript",
                "recursive",
                "recurse"
            ],
            "isRemoteOk": false
        },
        "body": "<h3>Implement a fibonacci number generator</h3>\n<p>Using the Fibonocci integer sequece <code>1, 1, 2, 3, 5, 8, 13, ...</code>, write a function <code>fib(i)</code> which returns the i-th element in the sequence. (The domain is all positive integers).</p>\n<pre><code>fib<span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span>;   <span class=\"hljs-comment\">// &lt;= 1</span>\nfib<span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span>:   <span class=\"hljs-comment\">// &lt;= 1</span>\nfib<span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>;   <span class=\"hljs-comment\">// &lt;= 2</span>\n...\nfib<span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span>;   <span class=\"hljs-comment\">// &lt;= 8</span>\nfib<span class=\"hljs-params\">(<span class=\"hljs-number\">7</span>)</span>;   <span class=\"hljs-comment\">// &lt;= 13</span>\n\n<span class=\"hljs-comment\">// Implement Me</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(i)</span> {</span>\n  <span class=\"hljs-comment\">// body...</span>\n}\n</code></pre>\n",
        "Notes": "<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// A naive but convo-starting implementation</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">i</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> fib(i-<span class=\"hljs-number\">2</span>) + fib(i-<span class=\"hljs-number\">1</span>);\n  }\n}\n</code></pre>\n<p>Hint at memoization. Does the candidate grasp the concept? (Or at the very least recursion.) When they are talking it out, do they mention <code>base case</code>?</p>\n"
    },
    {
        "context": {
            "file": "questions/js.function-composition.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "js",
                "javascript"
            ],
            "levels": [
                9
            ],
            "isRemoteOk": false
        },
        "body": "<h3>Implement a string repeater</h3>\n<p>Implement a function <code>mkRepeater</code> which accepts an interger <code>N</code> and returns a function which repeats a string <code>word</code> <em>N</em> times.</p>\n<p><em>e.g.;</em></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> repeat3 = mkRepeater(<span class=\"hljs-number\">3</span>);\nrepeat3(<span class=\"hljs-string\">'foo'</span>);   <span class=\"hljs-comment\">// &lt;= returns `foofoofoo`</span>\n\nmkRepeater(<span class=\"hljs-number\">5</span>)(<span class=\"hljs-string\">'hi'</span>);  <span class=\"hljs-comment\">// &lt;= returns `hihihihihi`</span>\n\n<span class=\"hljs-comment\">// Implement me</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mkRepeater</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-comment\">// body...</span>\n}\n</code></pre>\n",
        "Notes": "<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mkRepeater</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) </span>{ \n    <span class=\"hljs-keyword\">var</span> out = <span class=\"hljs-string\">''</span>, i;\n    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;N; i++){\n      out += word;\n    }\n    <span class=\"hljs-keyword\">return</span> out;\n  }\n}\n</code></pre>\n"
    },
    {
        "context": {
            "file": "questions/js.hoisting.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "js",
                "javascript"
            ],
            "levels": [
                9,
                10
            ],
            "isRemoteOk": true
        },
        "body": "<h3>What is <code>hoisting</code>?</h3>\n",
        "Notes": "<p>Hoisting is...</p>\n"
    },
    {
        "context": {
            "file": "questions/js.iife.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "js",
                "javascript"
            ],
            "isRemoteOk": true
        },
        "body": "<h3>Why use IIFEs?</h3>\n<p>What are the benefits of using <code>self-invoking anonymous function</code>s (<code>immediately-invoked functional expression</code>s)?</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// An IIFE</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-comment\">// body...</span>\n})();\n</code></pre>\n",
        "Notes": "<p>Variable scoping, leaks &amp; garbage collection, function purity</p>\n"
    },
    {
        "context": {
            "file": "questions/js.inheritance.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "js",
                "javascript"
            ],
            "levels": [
                9
            ],
            "isRmoteOk": false
        },
        "body": "<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Implement Rectangle psuedo-class</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\">l,w</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.length = l;\n    <span class=\"hljs-keyword\">this</span>.width  = w;\n}\n\nRectangle.prototype = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>);\nRectangle.prototype.constructor = Rectangle;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Implement #area (the instance method of Rectangle)</span>\n<span class=\"hljs-comment\">//</span>\nRectangle.prototype.area = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.length * <span class=\"hljs-keyword\">this</span>.width;\n}\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Some Rectangle Tests...</span>\n<span class=\"hljs-comment\">//</span>\ndescribe(<span class=\"hljs-string\">'a rectangle'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> myRect = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>);\n    it(<span class=\"hljs-string\">'should be an instance of Rectangle'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(myRect <span class=\"hljs-keyword\">instanceof</span> Rectangle).toBe(<span class=\"hljs-literal\">true</span>);\n    });\n    it(<span class=\"hljs-string\">'should have length and width props'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(myRect.length).toEqual(<span class=\"hljs-number\">3</span>);\n        expect(myRect.width).toEqual(<span class=\"hljs-number\">4</span>);\n    });\n    it(<span class=\"hljs-string\">'should have an #area method'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(myRect.area()).toEqual(<span class=\"hljs-number\">12</span>);\n    });\n});\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Implement Square to prototypically inherit from Rectangle</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Square</span>(<span class=\"hljs-params\">l</span>) </span>{\n    Rectangle.call(<span class=\"hljs-keyword\">this</span>, l, l);\n}\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Square Prototype Plumbing</span>\n<span class=\"hljs-comment\">//</span>\nSquare.prototype = <span class=\"hljs-built_in\">Object</span>.create(Rectangle.prototype);\nSquare.prototype.constructor = Square;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Some Square tests...</span>\n<span class=\"hljs-comment\">//</span>\ndescribe(<span class=\"hljs-string\">'a square'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> mySquare = <span class=\"hljs-keyword\">new</span> Square(<span class=\"hljs-number\">5</span>);\n    it(<span class=\"hljs-string\">'should be an instance of Square'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(mySquare <span class=\"hljs-keyword\">instanceof</span> Square).toBe(<span class=\"hljs-literal\">true</span>);\n    });\n    it(<span class=\"hljs-string\">'should be an instance of Rectangle'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(mySquare <span class=\"hljs-keyword\">instanceof</span> Rectangle).toBe(<span class=\"hljs-literal\">true</span>);\n    });\n    it(<span class=\"hljs-string\">'should inherit #area'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(mySquare.area()).toBe(<span class=\"hljs-number\">25</span>);\n    });\n});\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// How would you implement a computed property `perimeter`?</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty(Rectangle.prototype, <span class=\"hljs-string\">'perimeter'</span>, {\n    get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (<span class=\"hljs-keyword\">this</span>.length + <span class=\"hljs-keyword\">this</span>.width);\n    }\n});\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Perimeter Tests...</span>\n<span class=\"hljs-comment\">//</span>\ndescribe(<span class=\"hljs-string\">'perimeter'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> myRect = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>),\n        mySquare = <span class=\"hljs-keyword\">new</span> Square(<span class=\"hljs-number\">5</span>);\n    it(<span class=\"hljs-string\">'should work'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        expect(myRect.perimeter).toEqual(<span class=\"hljs-number\">14</span>);\n        expect(mySquare.perimeter).toEqual(<span class=\"hljs-number\">20</span>);\n    });\n});\n</code></pre>\n",
        "Notes": "<p>Hello World</p>\n"
    },
    {
        "context": {
            "file": "questions/js.reverse-words.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "JS"
            ]
        },
        "body": "<h3>Fundamental Array Manipulations</h3>\n<p>Write a function <code>duplicate()</code> which accepts an array input and returns 2 copies of the elements.</p>\n<p><em>e.g.;</em></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> say = <span class=\"hljs-string\">\"reverse in is yoda speaking\"</span>;\nyodaize(say); <span class=\"hljs-comment\">// Returns 'speaking yoda is in reverse'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">yodaize</span>(<span class=\"hljs-params\">str</span>) </span>{\n  <span class=\"hljs-comment\">// body...</span>\n}\n</code></pre>\n",
        "Notes": "<pre><code class=\"language-javascript\">str.split(<span class=\"hljs-string\">' '</span>).reverse().join(<span class=\"hljs-string\">' '</span>);\n</code></pre>\n"
    },
    {
        "context": {
            "file": "questions/js.slice-vs-splice.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "isRemoteOk": true,
            "tags": [
                "js",
                "array",
                "slice",
                "splice",
                "javascript"
            ],
            "levels": [
                9,
                10
            ]
        },
        "body": "<h3>What is the difference between <code>splice</code> and <code>slice</code>?</h3>\n<p>The value returned from both methods is equivalent. So how are they different?</p>\n<pre><code class=\"language-javascript\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].slice(<span class=\"hljs-number\">1</span>)   <span class=\"hljs-comment\">// returns [ 2, 3 ]</span>\n[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].splice(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// returns [ 2, 3 ]</span>\n</code></pre>\n",
        "Notes": "<p>Hello World</p>\n"
    },
    {
        "context": {
            "file": "questions/responsive-vs-adaptive.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "levels": [
                9,
                10
            ],
            "tags": [
                "design"
            ],
            "isRemoteOk": true
        },
        "body": "<h3>Compare/Contrast responsive and adaptive design</h3>\n",
        "Notes": "<p>@todo</p>\n"
    },
    {
        "context": {
            "file": "questions/rest-api.md",
            "author": "Danny Eck <daniel.eck@accenture.com>",
            "tags": [
                "rest",
                "http",
                "waldo",
                "crud"
            ]
        },
        "body": "<h3>REST Web APIs</h3>\n<p>Compose a request (psuedo-curl) for the following:</p>\n<h4>A) Given a RESTful resource <code>users</code>, retrieve all <code>users</code> with the name <code>waldo</code>:</h4>\n<p> </p>\n<h4>B) Change Waldo's <code>wearsGlasses</code> property to false given the following <code>user</code> data structure:</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// response</span>\n{\n    _id: <span class=\"hljs-string\">\"abc123\"</span>,\n    name: <span class=\"hljs-string\">\"waldo\"</span>,\n    wearsGlasses: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n",
        "Notes": "<pre><code class=\"language-http\">// Retrieve all users named \"waldo\"\nGET /users?name=waldo\n</code></pre>\n<p>Change Waldo's <code>wearsGlasses</code> property to false:</p>\n<pre><code class=\"language-http\">PUT /users/abc123\n{\n  \"_id\": \"abc123\",\n  \"name\": \"waldo\",\n  \"wearsGlasses\": false\n}\n</code></pre>\n<p><em>or</em></p>\n<pre><code class=\"language-http\">PATCH /users/abc123\n{\n  \"wearsGlasses\": false\n}\n</code></pre>\n"
    },
    {
        "context": {
            "file": "questions/two.md",
            "author": {
                "name": "Danny Eck",
                "email": "daniel.eck@accenture.com"
            },
            "tags": [
                "one",
                "question"
            ]
        },
        "body": "<h3>How does the Foo become the Bar?</h3>\n<p>Good question. Iduno...</p>\n",
        "Something": "alskdfj alksdfj alskdfj \n\nlaksdjflkajsdflkjasdf\n",
        "Notes": "<p>asldfkj alsd jfas\ndfj\nasdkf\nas dfj\njasdfkl</p>\n<p>alsdjflkasdj f</p>\n<ul>\n<li>asdf</li>\n<li>asdf</li>\n<li>asdf</li>\n<li>asdfasdf</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// some javascript</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">w</span>)</span>{\n  w.console.log(<span class=\"hljs-string\">'hello world!'</span>);\n})(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-literal\">undefined</span>);\n</code></pre>\n<blockquote>\n<p>a blockquote</p>\n</blockquote>\n<p>What about more code fencing?</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-params\">(whoami)</span> is awesome\n</code></pre>\n<p>Hizzle yea</p>\n"
    }
]